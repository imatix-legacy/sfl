<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>point_in_circle</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl189.htm">&lt;</A>
 | <A href="sfl191.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<A NAME="point_in_circle">&nbsp;</A>
<H3><A NAME="TOC203"><TT>point_in_circle</TT></A></H3>
<PRE>
#include "sflmath.h"
int
point_in_circle (const FPOINT *point, const FPOINT *coords)
</PRE>
<H4>Synopsis</H4>
<P>Checks if the requested FPOINT is within the specified circle.
   Returns TRUE or FALSE appropriately.
<H4>Source Code - (sflmath.c)</H4>
<PRE>
{
    double
        circle_radius,
        distance_from_centre;

    circle_radius        = ((coords [0].y - coords [1].y) *
                            (coords [0].y - coords [1].y)) +
                           ((coords [0].x - coords [1].x)  *
                            (coords [0].x - coords [1].x));

    distance_from_centre = ((coords [0].y - point-&gt; y) *
                            (coords [0].y - point-&gt; y)) +
                           ((coords [0].x - point-&gt; x) *
                            (coords [0].x - point-&gt; x));
    return (distance_from_centre &lt;= circle_radius);
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl189.htm">&lt;</A>
 | <A href="sfl191.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
