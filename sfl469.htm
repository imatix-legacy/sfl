<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>xml_create</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl468.htm">&lt;</A>
 | <A href="sfl470.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<A NAME="xml_create">&nbsp;</A>
<H3><A NAME="TOC482"><TT>xml_create</TT></A></H3>
<PRE>
#include "sflxml.h"
XML_ITEM *
xml_create (
    const char *name,
    const char *value)
</PRE>
<H4>Synopsis</H4>
<P>Creates and initialises a new XML_ITEM item. Returns the
   address of the created XML_ITEM item or NULL if there was not
   enough memory. Sets the new item's name and value as specified;
   only one of these should contain a value, although sflxml will
   not complain if both do. If the name is non-NULL this is a
   child node; if the value is non-NULL then this is a value node.
<H4>Source Code - (sflxml.c)</H4>
<PRE>
{
    XML_ITEM
        *item;

    list_create (item, sizeof (XML_ITEM));
    if (item)
      {
        list_reset (&amp;item-&gt; attrs);
        list_reset (&amp;item-&gt; children);
        item-&gt; parent = NULL;
        item-&gt; name   = mem_strdup (name);
        item-&gt; value  = mem_strdup (value);

        return (item);
      }
    else
        return (NULL);
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl468.htm">&lt;</A>
 | <A href="sfl470.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
