<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>conv_number_str</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl38.htm">&lt;</A>
 | <A href="sfl40.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<A NAME="conv_number_str">&nbsp;</A>
<H3><A NAME="TOC52"><TT>conv_number_str</TT></A></H3>
<PRE>
#include "sflconv.h"
char *
conv_number_str (
    const char *number,                 /*  Number to convert                */
    int   flags,                        /*  Number formatting flags          */
    char  dec_point,                    /*  Decimal point: '.' or ','        */
    int   decimals,                     /*  Number of decimals, or 0         */
    int   dec_format,                   /*  How are decimals shown?          */
    int   width,                        /*  Output field width, or 0         */
    int   sign_format                   /*  How are negatives shown?         */
)
</PRE>
<H4>Synopsis</H4>
<P>Converts a number to a string. The number format is defined
   largely by the flags argument, which can specify various values
   defined in sflconv.h: <TABLE BORDER NOWRAP> <TR><TD
   ALIGN="LEFT"><B>FLAG N SIGNED</B>  <TD ALIGN="LEFT">Show signed
   number, using sign_format argument. <TR><TD
   ALIGN="LEFT"><B>FLAG N DECIMALS</B>  <TD ALIGN="LEFT">Show
   decimals, using dec_format argument. <TR><TD
   ALIGN="LEFT"><B>FLAG N LEFT</B>  <TD ALIGN="LEFT">Left-justify
   number; no effect if width is 0. <TR><TD ALIGN="LEFT"><B>FLAG N
   ZERO FILL</B>  <TD ALIGN="LEFT">Right-justfified, with leading
   zeroes. <TR><TD ALIGN="LEFT"><B>FLAG N ZERO BLANK</B>  <TD
   ALIGN="LEFT">Show zero as empty string or spaces (width &gt;
   0). <TR><TD ALIGN="LEFT"><B>FLAG N THOUSANDS</B>  <TD
   ALIGN="LEFT">Show number with thousands separators. </TABLE>
   Sign formats: <TABLE BORDER NOWRAP> <TR><TD
   ALIGN="LEFT"><B>SIGN NEG TRAIL</B>  <TD ALIGN="LEFT">Negative
   numbers only: 123- <TR><TD ALIGN="LEFT"><B>SIGN ALL TRAIL</B>
   <TD ALIGN="LEFT">All non-zero numbers: 123- 123+ <TR><TD
   ALIGN="LEFT"><B>SIGN NEG LEAD</B>  <TD ALIGN="LEFT">Negative
   numbers only: -123 <TR><TD ALIGN="LEFT"><B>SIGN ALL LEAD</B>
   <TD ALIGN="LEFT">All non-zero numbers: -123 +123 <TR><TD
   ALIGN="LEFT"><B>SIGN FINANCIAL</B>  <TD ALIGN="LEFT">Negative
   numbers only: (123) </TABLE> Decimal formats: <TABLE BORDER
   NOWRAP> <TR><TD ALIGN="LEFT"><B>DECS SHOW ALL</B>  <TD
   ALIGN="LEFT">123.10, 123.00, 0.95 <TR><TD ALIGN="LEFT"><B>DECS
   DROP ZEROS</B>  <TD ALIGN="LEFT">123.1, 123, 0.95 <TR><TD
   ALIGN="LEFT"><B>DECS HIDE ALL</B>  <TD ALIGN="LEFT">123, 123, 0
   <TR><TD ALIGN="LEFT"><B>DECS PERCENTAGE</B>  <TD
   ALIGN="LEFT">12300, 12300, 95 <TR><TD ALIGN="LEFT"><B>DECS
   SCIENTIFIC</B>  <TD ALIGN="LEFT">1.231e2, 1.23e2, 9.5e-1
   </TABLE> The input number string may contain leading zeros and
   a leading sign character (space, '+', '-') if signed. These are
   examples of valid 8-digit numbers: "1234" "00001234" "12345678"
   "+12345678". If the flag FLAG_N_DECIMALS is set, the last X
   digits are taken to be decimals, where X is the value of the
   decimals argument. If the number contains a decimal point
   (always '.'), this is taken to indicate the start of the
   decimal part. The formatted number is placed within a field of
   specified width. If the number is right-justfied, this means it
   may have leading spaces. If the field width is 0, the number
   will never have leading spaces. Returns a pointer to the
   formatted string, or NULL if the specified width is too small
   for formatted number or the supplied number does not contain
   enough digits.
<H4>Source Code - (sflcvns.c)</H4>
<PRE>
{
    static char
        formatted [FORMAT_MAX + 1],     /*  Formatted return string          */
        zero [CONV_MAX_DECS + 2];       /*  Default value if needed          */
    int
        sep_stop,                       /*  Where we put next sep_char       */
        dec_stop,                       /*  Where we put decimal point       */
        decs_wanted = decimals,         /*  Number of decimals wanted        */
        decs_seen,                      /*  Number of decimals output        */
        sign_pos,                       /*  Where we put sign, if any        */
        digits;                         /*  Number of digits read so far     */
    char
       *dest,                           /*  Store formatted number here      */
        sign_char,                      /*  Number's sign: ' ', '+', '-'     */
        sep_char,                       /*  Thousands separator '.' or ','   */
        drop_zero,                      /*  We suppress this char            */
        ch;                             /*  Next character in picture        */
    Bool
        have_zero;                      /*  TRUE if whole number is zero     */

    ASSERT (width &lt;= FORMAT_MAX);
    ASSERT (dec_point == '.' || dec_point == ',');

    conv_reason = 0;                    /*  No conversion errors so far      */

    /*  ---------------------------------   Prepare to copy digits  ---------*/

    if (decs_wanted &gt; CONV_MAX_DECS)
      {
        conv_reason = CONV_ERR_DECS_OVERFLOW;
        return (NULL);                  /*  Error - too many decimals        */
      }
    /*  If value is empty, use "0" with enough decimals as default value     */
    /*  We allow one whole digit and as many decimals as needed.             */
    if (strnull (number))
      {
        <A href="sfl282.htm#strpad">strpad</A> (zero, '0', decs_wanted + 1);
        number = zero;
      }

    /*  Pick-up sign character if present                                    */
    if (*number == ' ' || *number == '+' || *number == '-')
        sign_char = *number++;
    else
        sign_char = ' ';

    /*  While leading zero is '0' we blank-out zeros in the number           */
    drop_zero = (char) (flags &amp; FLAG_N_ZERO_FILL? ' ': '0');

    /*  Prepare for decimals                                                 */
    if ((flags &amp; FLAG_N_DECIMALS) == 0)
        decs_wanted = 0;

    if (strchr (number, '.'))
        dec_stop = (int) (strchr (number, '.') - (char *) number);
    else
        dec_stop = strlen (number) - decs_wanted;

    if (dec_stop &lt; 1)
      {
        conv_reason = CONV_ERR_DECS_MISSING;
        return (NULL);                  /*  Error - too few decimals         */
      }

    /*  Prepare for thousands-separators if FLAG_N_THOUSANDS                 */
    if ((flags &amp; FLAG_N_THOUSANDS) &amp;&amp; !(flags &amp; FLAG_N_ZERO_FILL))
      {
        /*  Get number of whole digits, allowing for decimals &amp; dec sign     */
        sep_char = (char) (dec_point == '.'? ',': '.');
        sep_stop = (dec_stop - (decs_wanted? decs_wanted + 1: 0)) % 3;
        if (sep_stop == 0)
            sep_stop = 3;               /*  Get into range 1..3              */
      }
    else
      {
        sep_char = ' ';
        sep_stop = 0;                   /*  No thousands separators          */
      }

    /*  ---------------------------------   Copy the digits  ----------------*/

    digits    = 0;                      /*  No digits loaded yet             */
    decs_seen = 0;                      /*  No decimals output yet           */
    have_zero = TRUE;                   /*  Assume number is zero            */
    dest      = formatted;              /*  Format number                    */
    while (*number)                     /*    until we hit the terminator    */
      {
        ch = *number++;
        if (ch == '.')
            continue;                   /*  Ignore '.' in number             */

        digits++;

        if (ch == drop_zero &amp;&amp; digits &lt; dec_stop)
            ch = ' ';
        else
        if (isdigit (ch))
          {
            drop_zero = ' ';
            if (ch &gt; '0')
                have_zero = FALSE;
          }
        if (ch != ' ' || (width &gt; 0 &amp;&amp; !(flags &amp; FLAG_N_LEFT)))
          {
            *dest++ = ch;               /*  Output this digit                */
            if (digits &gt; dec_stop)
                decs_seen++;            /*  Count the decimal digit          */
            else
            if (digits == dec_stop)     /*  Handle decimal stop              */
              {                         /*    with optional point            */
                if (flags &amp; FLAG_N_DECIMALS)
                    *dest++ = dec_point;
                sep_stop = 0;           /*  And kill further thousand seps   */
              }
          }
        /*  Output thousands separator unless we are in blank area           */
        if (digits == sep_stop)
          {
            if (ch != ' ')
                *dest++ = sep_char;
            sep_stop += 3;
          }
      }
    *dest = 0;                          /*  Terminate the string nicely      */
    /*  ---------------------------------   Post-format the result  ---------*/

    if (decs_wanted &gt; 0)
      {
        /*  Output trailing decimal zeroes if not supplied                   */
        if (decs_seen == 0)
            *dest++ = dec_point;
        while (decs_seen &lt; decs_wanted)
          {
            *dest++ = '0';
            decs_seen++;
          }
        /*  Drop all decimals if format is DEC_HIDE_ALL                      */
        if (dec_format == DECS_HIDE_ALL)
            while (*dest != dec_point)
                dest--;                 /*  Drop-off trailing zero           */
        else
        /*  Drop trailing decimal zeroes if format is DEC_DROP_ZEROS         */
        if (dec_format == DECS_DROP_ZEROS)
            while (*dest != dec_point)
              {
                if (*(dest - 1) &gt; '0')
                    break;
                else
                    dest--;             /*  Drop-off trailing zero           */
              }
        *dest = 0;                      /*  Terminate the string nicely      */
      }

    /*  Justify within width if width &gt; 0                                    */
    sign_pos = 0;                       /*  Sign normally comes at start     */
    digits   = strlen (formatted);
    if (flags &amp; FLAG_N_SIGNED)
      {
        digits++;                       /*  Allow for eventual sign          */
        if (sign_format == SIGN_FINANCIAL)
            digits++;                   /*  Sign shown like (123)            */
      }
    while (digits &lt; width)
      {
        if (flags &amp; FLAG_N_LEFT &amp;&amp; !(flags &amp; FLAG_N_ZERO_FILL))
            strcat (formatted, " ");
        else
          {
            <A href="sfl286.htm#stropen">stropen</A> (formatted, FALSE); /*  Insert blank at start of string  */
            if (flags &amp; FLAG_N_ZERO_FILL)
                formatted [0] = '0';
            else
                sign_pos++;             /*  Skip leading space               */
          }
        digits++;
      }

    /*  Format sign if FLAG_N_SIGNED                                         */
    if (flags &amp; FLAG_N_SIGNED)
      {
        if (sign_format == SIGN_NEG_LEAD
        ||  sign_format == SIGN_ALL_LEAD
        ||  sign_format == SIGN_FINANCIAL)
            <A href="sfl286.htm#stropen">stropen</A> (formatted, FALSE);

        if (sign_format == SIGN_NEG_TRAIL
        ||  sign_format == SIGN_ALL_TRAIL
        ||  sign_format == SIGN_FINANCIAL)
            strcat (formatted, " ");

        if (!have_zero)                 /*  Zero has no sign                 */
            switch (sign_format)
              {
                case SIGN_NEG_LEAD:
                    if (sign_char != '-')
                        break;          /*  Fall through if negative sign    */
                case SIGN_ALL_LEAD:
                    formatted [sign_pos] = sign_char;
                    break;

                case SIGN_NEG_TRAIL:
                    if (sign_char != '-')
                        break;          /*  Fall through if negative sign    */
                case SIGN_ALL_TRAIL:
                    strlast (formatted) = sign_char;
                    break;

                case SIGN_FINANCIAL:
                    if (sign_char == '-')
                      {
                        formatted [0]       = '(';
                        strlast (formatted) = ')';
                      }
                    break;
              }
      }

    /*  If all zeroes, return a blank string if FLAG_N_ZERO_BLANK            */
    if ((flags &amp; FLAG_N_ZERO_BLANK) &amp;&amp; have_zero)
      {
        memset (formatted, ' ', width);
        formatted [width] = 0;
      }

    if (width &gt; 0 &amp;&amp; (strlen (formatted) &gt; (size_t) width))
      {
        conv_reason = CONV_ERR_NUM_OVERFLOW;
        return (NULL);                  /*  Overflow -- number too large     */
      }
    else
        return (formatted);
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl38.htm">&lt;</A>
 | <A href="sfl40.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
