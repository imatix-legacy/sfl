<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>Compression functions</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl16.htm">&lt;</A>
 | <A href="sfl18.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<H2><A NAME="TOC30">Compression functions</A></H2>
<P>Filename: sflcomp.h
<BR>Package: Standard Function Library (SFL)
<BR>Written: 1991/05/20 iMatix SFL project team <A
   HREF=mailto:"sfl@imatix.com">sfl@imatix.com</A>
<BR>Revised: 1997/09/08
<BR>Copyright: Copyright (c) 1996-2000 iMatix Corporation
<H3>Synopsis</H3>
<P>Various compression/decompression functions. The LZ-type
   algorith (LZRW1/KH) was originally written by Kurt Haenen
   &lt;ghgaea8@blekul11&gt; and made portable by P. Hintjens. This
   is a reasonable LZ/RLE algorithm, very fast, but about 30% less
   efficient than a ZIP-type algorithm in terms of space. The RLE
   algorithms are better suited to compressing sparse data. The
   nulls variant is specifically tuned to data that consists
   mostly of binary zeroes. The bits variant is tuned for
   compressing sparse bitmaps.
<H4>List of Functions</H4>
<UL>
<LI>word <A href="sfl18.htm#compress_block">compress block</A><BR>
   (const byte *source, byte *dest, word source_size);
</LI>
<LI>word <A href="sfl19.htm#expand_block">expand block</A><BR>
   (const byte *source, byte *dest, word source_size);
</LI>
<LI>word <A href="sfl20.htm#compress_rle">compress rle</A><BR>
   ( byte *source, byte *dest, word source_size);
</LI>
<LI>word <A href="sfl21.htm#expand_rle">expand rle</A><BR>
   (const byte *source, byte *dest, word source_size);
</LI>
<LI>word <A href="sfl22.htm#compress_nulls">compress nulls</A><BR>
   ( byte *source, byte *dest, word source_size);
</LI>
<LI>word <A href="sfl23.htm#expand_nulls">expand nulls</A><BR>
   (const byte *source, byte *dest, word source_size);
</LI>
<LI>word <A href="sfl24.htm#compress_bits">compress bits</A><BR>
   ( byte *source, byte *dest, word source_size);
</LI>
<LI>word <A href="sfl25.htm#expand_bits">expand bits</A><BR>
   (const byte *source, byte *dest, word source_size);
</LI>
</UL>
<H4>List of Symbol Definitions</H4>
<P>sflcomp.h defines these symbols, possibly conditionally:
<TABLE BORDER NOWRAP>
<TR><TH ALIGN="LEFT">Symbol:  </TH>
    <TH ALIGN="LEFT">Defined as:</TH>
<TR><TD ALIGN="LEFT"><TT><B>SFLCOMP_INCLUDED</B>  </TT>
<TD ALIGN="LEFT">TRUE
</TABLE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl16.htm">&lt;</A>
 | <A href="sfl18.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
