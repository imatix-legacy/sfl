<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>read_UDP</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl359.htm">&lt;</A>
 | <A href="sfl361.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<A NAME="read_UDP">&nbsp;</A>
<H3><A NAME="TOC373"><TT>read_UDP</TT></A></H3>
<PRE>
#include "sflsock.h"
int
read_UDP (
    sock_t handle,                      /*  Socket handle                    */
    void *buffer,                       /*  Buffer to receive data           */
    size_t length,                      /*  Maximum amount of data to read   */
    const struct sockaddr_in *sin       /*  Block for address, or null       */
)
</PRE>
<H4>Synopsis</H4>
<P> Reads data from a connected or unconnected UDP socket. To
   prepare a connected UDP socket you call <A href="sfl342.htm#connect_UDP">connect UDP</A> ().
   This makes a connection to a specific port on a specific host,
   and returns a socket handle. When you call this function with a
   null value for the address argument, it assumes you are using a
   connected UDP socket. To prepare an unconnected UDP socket,
   call <A href="sfl340.htm#create_socket">create socket</A> () with the string "udp" as argument.
   This returns a sock_t handle that you can use in this function.
   If you use an unconnected UDP socket you must provide an
   address structure. The function places the remote host and port
   in this structure. This lets you reply using <A href="sfl361.htm#write_UDP">write UDP</A> ().
   Generally a server can use unconnected sockets, and a client
   can use connected sockets. You can also format an address for a
   specific host and port using the <A href="sfl347.htm#address_end_point">address end point</A> ()
   function. If there is an error on the read this function
   returns SOCKET_ERROR. You can handle errors (in sockerrno) as
   fatal except for EAGAIN which indicates that the operation
   would cause a non-blocking socket to block. Treat EWOULDBLOCK
   as EAGAIN.
<H4>Source Code - (sflsock.c)</H4>
<PRE>
{
#if (defined (DOES_SOCKETS))
    argsize_t
        sin_length;                     /*  Length of address                */
    int
        flags = 0,                      /*  Flags for call                   */
        rc;                             /*  Return code from call            */

    ASSERT (buffer);
    ASSERT (sin);
    sin_length = (int) sizeof (*sin);
    if (sin)
        /*  Read from unconnected UDP socket; we accept the address of the   */
        /*  sending party in the sin argument.                               */
        rc = recvfrom ((SOCKET) handle, buffer, length, flags,
                      (struct sockaddr *) sin, &amp;sin_length);
    else
        /*  Read from a connected UDP socket; we don't need to get the       */
        /*  address, since we already know it.                               */
        rc = recv     ((SOCKET) handle, buffer, length, flags);

#   if (defined (__WINDOWS__))
    return (win_error (rc));
#   else
    return (rc);
#   endif
#else
    return ((int) SOCKET_ERROR);        /*  Sockets not supported            */
#endif
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl359.htm">&lt;</A>
 | <A href="sfl361.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
