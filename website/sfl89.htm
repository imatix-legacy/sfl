<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>exdr_writed</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl88.htm">&lt;</A>
 | <A href="sfl90.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<A NAME="exdr_writed">&nbsp;</A>
<H3><A NAME="TOC102"><TT>exdr_writed</TT></A></H3>
<PRE>
#include "sflexdr.h"
int
exdr_writed (DESCR *buffer, const char *format, ...)
</PRE>
<H4>Synopsis</H4>
<P>As <A href="sfl88.htm#exdr_write">exdr write</A>(), but accepts a DESCR buffer. This is more
   secure. Aborts with an error if the formatted data would be too
   long for the buffer, if compiled with DEBUG. The buffer address
   cannot be NULL.
<H4>Source Code - (sflexdr.c)</H4>
<PRE>
{
    va_list
        argptr;                         /*  Argument list pointer            */
    byte
        *target,                        /*  Pointer into target buffer       */
        *block;                         /*  Source block for 'M' type        */
    char
        *string;                        /*  Source string for 's' type       */
    dbyte
        dbyte_value;                    /*  Network format dbyte value       */
    qbyte
        memory_size = 0,                /*  Memory descriptor size value     */
        qbyte_value;                    /*  Network format qbyte value       */
    size_t
        used_size;                      /*  Current buffer data size         */

    ASSERT (buffer);
    ASSERT (format);
    va_start (argptr, format);          /*  Start variable arguments list    */
    target = buffer-&gt; data;

    while (*format)
      {
        used_size = (size_t) (target - buffer-&gt; data);
        switch (*format++)
          {
            case 'c':                   /*  Character                        */
            case 'b':                   /*  Single byte                      */
                *(byte *) target = (byte) va_arg (argptr, int);
                ASSERT (used_size + 1 &lt;= buffer-&gt; size);
                target += 1;
                break;

            case 'd':                   /*  Signed short integer             */
            case 'w':                   /*  Unsigned short integer           */
            case 'B':                   /*  Bool                             */
                dbyte_value = htons ((short) va_arg (argptr, int));
                ASSERT (used_size + 2 &lt;= buffer-&gt; size);
                *(byte *) target++ = *((byte *) &amp;dbyte_value);
                *(byte *) target++ = *((byte *) &amp;dbyte_value + 1);
                break;

            case 'l':                   /*  Signed long (32-bit)             */
            case 'q':                   /*  4-byte unsigned value            */
                qbyte_value = htonl (va_arg (argptr, qbyte));
                ASSERT (used_size + 4 &lt;= buffer-&gt; size);
                *(byte *) target++ = *((byte *) &amp;qbyte_value);
                *(byte *) target++ = *((byte *) &amp;qbyte_value + 1);
                *(byte *) target++ = *((byte *) &amp;qbyte_value + 2);
                *(byte *) target++ = *((byte *) &amp;qbyte_value + 3);
                break;

            case 's':                   /*  Null-terminated string           */
                string = va_arg (argptr, char *);
                if (string)
                  {
                    ASSERT (used_size + strlen (string) + 1 &lt;= buffer-&gt; size);
                    strcpy ((char *) target, string);
                    target += strlen (string) + 1;
                  }
                else                    /*  Store NULL as single null byte   */
                  {
                    ASSERT (used_size + 1 &lt;= buffer-&gt; size);
                    *(byte *) target++ = 0;
                  }
                break;

            case 'm':                   /*  Memory descriptor size           */
                memory_size = va_arg (argptr, int);
                ASSERT (used_size + 2 + memory_size &lt;= buffer-&gt; size);
                dbyte_value = htons ((dbyte) memory_size);
                *(byte *) target++ = *((byte *) &amp;dbyte_value);
                *(byte *) target++ = *((byte *) &amp;dbyte_value + 1);
                break;
            case 'M':                   /*  Memory descriptor body           */
                block = va_arg (argptr, byte *);
                if (block)
                  {
                    memcpy (target, block, (size_t) memory_size);
                    target += (size_t) memory_size;
                  }
                else
                    ASSERT (memory_size == 0);
                break;

            case 'h':                   /*  Huge memory descriptor size      */
                memory_size = va_arg (argptr, qbyte);
                ASSERT (used_size + 4 + memory_size &lt;= buffer-&gt; size);
                qbyte_value = htonl (memory_size);
                *(byte *) target++ = *((byte *) &amp;qbyte_value);
                *(byte *) target++ = *((byte *) &amp;qbyte_value + 1);
                *(byte *) target++ = *((byte *) &amp;qbyte_value + 2);
                *(byte *) target++ = *((byte *) &amp;qbyte_value + 3);
                break;
            case 'H':                   /*  Huge memory descriptor body      */
                block = va_arg (argptr, byte *);
                if (block)
                  {
                    memcpy (target, block, (size_t) memory_size);
                    target += (size_t) memory_size;
                  }
                else
                    ASSERT (memory_size == 0);
                break;
          }
      }
    va_end (argptr);                    /*  End variable arguments list      */
    return ((int) (target - buffer-&gt; data));
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl88.htm">&lt;</A>
 | <A href="sfl90.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
