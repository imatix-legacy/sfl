<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>conv_str_date</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl40.htm">&lt;</A>
 | <A href="sfl42.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<A NAME="conv_str_date">&nbsp;</A>
<H3><A NAME="TOC54"><TT>conv_str_date</TT></A></H3>
<PRE>
#include "sflconv.h"
long
conv_str_date (
    const char *string,
    int  flags,
    int  format,
    int  order)
</PRE>
<H4>Synopsis</H4>
<P>Converts a string to a date. The supposed format of the date is
   defined by the format argument, which can be one of: <TABLE
   BORDER NOWRAP> <TR><TD ALIGN="LEFT"><B>DATE YMD COMPACT</B>
   <TD ALIGN="LEFT">Year month day. <TR><TD ALIGN="LEFT"><B>DATE
   YMD DELIM</B>  <TD ALIGN="LEFT">Year month day. <TR><TD
   ALIGN="LEFT"><B>DATE YMD SPACE</B>  <TD ALIGN="LEFT">Year month
   day. <TR><TD ALIGN="LEFT"><B>DATE YMD COMMA</B>  <TD
   ALIGN="LEFT">Year month day. <TR><TD ALIGN="LEFT"><B>DATE YM
   COMPACT</B>  <TD ALIGN="LEFT">Year and month only; day is zero.
   <TR><TD ALIGN="LEFT"><B>DATE YM DELIM</B>  <TD
   ALIGN="LEFT">Year and month only; day is zero. <TR><TD
   ALIGN="LEFT"><B>DATE YM SPACE</B>  <TD ALIGN="LEFT">Year and
   month only; day is zero. <TR><TD ALIGN="LEFT"><B>DATE MD
   COMPACT</B>  <TD ALIGN="LEFT">Month and day only; year is zero.
   <TR><TD ALIGN="LEFT"><B>DATE MD DELIM</B>  <TD
   ALIGN="LEFT">Month and day only; year is zero. <TR><TD
   ALIGN="LEFT"><B>DATE MD SPACE</B>  <TD ALIGN="LEFT">Month and
   day only; year is zero. </TABLE> The date order must be one of:
   <TABLE BORDER NOWRAP> <TR><TD ALIGN="LEFT"><B>DATE ORDER
   YMD</B>  <TD ALIGN="LEFT">Year month day. <TR><TD
   ALIGN="LEFT"><B>DATE ORDER DMY</B>  <TD ALIGN="LEFT">Day month
   year. <TR><TD ALIGN="LEFT"><B>DATE ORDER MDY</B>  <TD
   ALIGN="LEFT">Month day year. </TABLE> You can override the
   order using these flags: <TABLE BORDER NOWRAP> <TR><TD
   ALIGN="LEFT"><B>FLAG D ORDER YMD</B>  <TD ALIGN="LEFT">Year
   month day. <TR><TD ALIGN="LEFT"><B>FLAG D ORDER DMY</B>  <TD
   ALIGN="LEFT">Day month year. <TR><TD ALIGN="LEFT"><B>FLAG D
   ORDER MDY</B>  <TD ALIGN="LEFT">Month day year. </TABLE>
   Returns the date as a long integer, YYYYMMDD. The conversion is
   pretty relaxed and allows strings like: 010195, 1-1-95, 1-Jan-
   95, 1jan95, 01jan95, 1 1 95, etc. The input string must be
   null-terminated. Returns -1 in case of an invalid date or
   format. If the short formats (DATE_DM_..., DATE_YM_...) are
   used, the missing field is always set to 0 and cannot be
   supplied in the string. If the date was empty, i.e. contains no
   usable digits, returns 0.
<H4>Source Code - (sflcvsd.c)</H4>
<PRE>
{
    static
        char *month_name [] =
          {
            "jan", "feb", "mar", "apr", "may", "jun",
            "jul", "aug", "sep", "oct", "nov", "dec"
          };

    static byte
        month_days [] =
          {
            31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
          },
        order_ptr [][3] =               /*  Year, Month, Day pointers        */
          {                             /*    for various orders &amp; formats   */
          /*  YY MM DD   YYYY MM DD     YY MM       YYYY MM            MM DD */
            { 0, 2, 4 }, { 0, 4, 6 }, { 0, 2, 99 }, { 0, 4, 99 }, { 99, 0, 2 },
            { 4, 2, 0 }, { 4, 2, 0 }, { 2, 0, 99 }, { 2, 0, 99 }, { 99, 2, 0 },
            { 4, 0, 2 }, { 4, 0, 2 }, { 2, 0, 99 }, { 2, 0, 99 }, { 99, 0, 2 },
          };

    char
        date_digits   [9],              /*  8 digits of date                 */
        month_letters [4] = "???",      /*  3 characters of month            */
        ch;                             /*  Next character in date           */
    long
        feedback;                       /*  Returned date; -1 = error        */
    int
        digits,                         /*  Number of digits in string       */
        delimiters,                     /*  Number of delimiters in date     */
        digitseq,                       /*  Number of digits in sequence     */
        count,                          /*  Number of month letters          */
        year,                           /*  Date year value                  */
        month,                          /*  Date month value                 */
        day,                            /*  Date day value                   */
        order_index,                    /*  Index into order table           */
        y_ptr,                          /*  Where is year in date?           */
        m_ptr,                          /*  Where is month in date?          */
        d_ptr,                          /*  Where is day in date?            */
        date_order = order;             /*  Actual date order                */
    Bool
        had_month;                      /*  Did we already get a month?      */

    ASSERT (format &gt;= DATE_FORMAT_FIRST &amp;&amp; format &lt;= DATE_FORMAT_LAST);
    ASSERT (order  &gt;= DATE_ORDER_FIRST  &amp;&amp; order  &lt;= DATE_ORDER_LAST);

    conv_reason = 0;                    /*  No conversion errors so far      */
    if (flags &amp; FLAG_D_ORDER_YMD)
        date_order = DATE_ORDER_YMD;
    else
    if (flags &amp; FLAG_D_ORDER_DMY)
        date_order = DATE_ORDER_DMY;
    else
    if (flags &amp; FLAG_D_ORDER_MDY)
        date_order = DATE_ORDER_MDY;

    /*  Collect date digits                                                  */
    digits     = 0;                     /*  Nothing collected so far         */
    digitseq   = 0;                     /*  No digits in sequence            */
    feedback   = 0;                     /*  No errors so far                 */
    delimiters = 0;                     /*  We allow up to 2 delimiters      */
    had_month  = FALSE;                 /*  True after 3-letter month seen   */

    do
      {
        ch = *string++;
        if (isdigit (ch))
          {
            if (digits &lt; 8)
              {
                digitseq++;
                date_digits [digits++] = ch;
              }
            else
              {
                conv_reason = CONV_ERR_DATE_SIZE;
                feedback = -1;          /*  Too many digits                  */
              }
          }
        else
          {
            /*  Fill-up to even number of digits                             */
            if (digits &gt; (digits / 2) * 2)
              {
                date_digits [digits] = date_digits [digits - 1];
                date_digits [digits - 1] = '0';
                digits++;
              }
            /*  3 or 5 in a row is not allowed                               */
            if (digitseq == 3 || digitseq == 5)
              {
                conv_reason = CONV_ERR_REJECT_3_5;
                feedback = -1;
              }
            digitseq = 0;

            /*  If a letter, try to match against a month                    */
            if (isalpha (ch))
              {
                if (had_month)
                  {
                    conv_reason = CONV_ERR_MULTIPLE_MONTH;
                    feedback = -1;
                  }
                else
                  {
                    for (count = 0; isalpha (ch); )
                      {
                        if (count &lt; 3)
                            month_letters [count++] = (char) tolower (ch);
                        ch = *string++;
                      }
                    string--;           /*  Move back to char after month    */
                    if (count &lt; 3)
                      {
                        conv_reason = CONV_ERR_BAD_MONTH;
                        feedback = -1;  /*  Too few letters                  */
                      }
                    month_letters [3] = 0;
                    for (count = 0; count &lt; 12; count++)
                        if (streq (month_letters, month_name [count]))
                          {
                            count++;
                            date_digits [digits++] = (char) (count / 10 + '0');
                            date_digits [digits++] = (char) (count % 10 + '0');
                            had_month = TRUE;
                            break;
                          }
                    if (!had_month)
                      {
                        conv_reason = CONV_ERR_BAD_MONTH;
                        feedback = -1;  /*  Month not found                  */
                      }
                  }
              }
            else
            if (ispunct (ch))           /*  Skip any delimiter               */
                if ((++delimiters &gt; 2)
                ||  (format &gt; DATE_YMD_LAST &amp;&amp; delimiters &gt; 1))
                  {
                    conv_reason = CONV_ERR_MULTIPLE_DELIM;
                    feedback = -1;      /*  Multiple delimiters              */
                  }
          }
      }
    until (ch == 0);

    /*  Return zero date if empty                                            */
    if (digits == 0)
        return (feedback);

    /*  Calculate offset in date_digits for various date order &amp; formats     */
    order_index = (date_order - 1) * 5; /*  Each row has 5 items             */

    if (format &lt;= DATE_YMD_LAST)
      {
        if (digits == 6)
            ;   /* nothing */
        else
        if (digits == 8)
            order_index += 1;
      }
    else
    if (format &lt;= DATE_YM_LAST)
      {
        date_digits [digits++] = '0';
        date_digits [digits++] = '0';
        if (digits == 6)
            order_index += 2;
        else
        if (digits == 8)
            order_index += 3;
        else
          {
            conv_reason = CONV_ERR_DATE_SIZE;
            return (-1);                /*  Error - bad date size            */
          }
      }
    else
    if (format &lt;= DATE_MD_LAST)
      {
        date_digits [digits++] = '0';
        date_digits [digits++] = '0';
        if (digits == 6)
            order_index += 4;
        else
          {
            conv_reason = CONV_ERR_DATE_SIZE;
            return (-1);                /*  Error - bad date size            */
          }
      }

    /*  Decode order to pick-up offset of day/month/year in date_digits      */
    y_ptr = order_ptr [order_index][0];
    m_ptr = order_ptr [order_index][1];
    d_ptr = order_ptr [order_index][2];

#   define DIGIT(x) (date_digits [(x)] - '0')
    if (y_ptr != 99)
      {
        year = DIGIT (y_ptr) * 10 + DIGIT (y_ptr + 1);
        if (digits == 8)
            year = DIGIT (y_ptr + 2) * 10 + DIGIT (y_ptr + 3) + year * 100;

        if (year &lt; 50)
            year += 2000;
        else
        if (year &lt; 100)
            year += 1900;
      }
    else
        year = 0;

    if (m_ptr != 99)
      {
        month = DIGIT (m_ptr) * 10 + DIGIT (m_ptr + 1);
        if (month == 0 || month &gt; 12)
          {
            conv_reason = CONV_ERR_OUT_OF_RANGE;
            feedback = -1;
          }
      }
    else
        month = 0;

    if (d_ptr != 99)
      {
        day = DIGIT (d_ptr) * 10 + DIGIT (d_ptr + 1);
        if ((day == 0 || day &gt; (int) month_days [month - 1])
        ||  (month == 2 &amp;&amp; day == 29 &amp;&amp; !<A href="sfl54.htm#leap_year">leap year</A> (year)))
          {
            conv_reason = CONV_ERR_OUT_OF_RANGE;
            feedback = -1;
          }
      }
    else
        day = 0;

    if (feedback == 0)
        feedback = year * 10000L + month * 100 + day;

    return (feedback);
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl40.htm">&lt;</A>
 | <A href="sfl42.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
