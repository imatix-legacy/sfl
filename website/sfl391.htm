<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>strt2symb_</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl390.htm">&lt;</A>
 | <A href="sfl392.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<A NAME="strt2symb_">&nbsp;</A>
<H3><A NAME="TOC404"><TT>strt2symb_</TT></A></H3>
<PRE>
#include "sflsymb.h"
SYMTAB *
strt2symb_ (
    char      **table,                  /*  String table to convert          */
    const char *filename,               /*  Name of source file making call  */
    size_t      lineno)                 /*  Line number in calling source    */
</PRE>
<H4>Synopsis</H4>
<P>Converts a table of strings into a symbol table. The input
   table consists of an array of null-terminated strings,
   terminated in a null pointer. Ignores any strings that don't
   look like: "name=value". If the table contains multiple strings
   with the same name, the last instance is stored in the symbol
   table. Note that if you omit the last null pointer in the input
   table, you will probably get an addressing error. Returns NULL
   if there was insufficient memory to allocate the symbol table,
   or if the input argument was null. Do not call this function
   directly: pass through the strt2symb macro.
<H4>Source Code - (sflsymb.c)</H4>
<PRE>
{
    SYMTAB
        *symtab;                        /*  Allocated symbol table           */
    char
        *equals;                        /*  Position of '=' in string        */
    int
        string_nbr;                     /*  Index into string table          */

    if (!table)
        return (NULL);                  /*  Return NULL if argument is null  */

    symtab = <A href="sfl374.htm#sym_create_table_">sym create table </A> (filename, lineno);
    if (symtab)
      {
        for (string_nbr = 0; table [string_nbr]; string_nbr++)
          {
            equals = strchr (table [string_nbr], '=');
            if (equals)
              {
                *equals = '\0';         /*  Cut into two strings             */
                <A href="sfldoc.htm#sym_assume_symbol">sym assume symbol</A> (symtab, table [string_nbr], equals + 1);
                *equals = '=';          /*  Restore previous state           */
              }
          }
      }
    return (symtab);
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl390.htm">&lt;</A>
 | <A href="sfl392.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
