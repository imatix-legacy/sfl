<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>conv_time_pict</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl44.htm">&lt;</A>
 | <A href="sfl46.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="sfl80c.gif" ALT="SFL Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SFL</B><BR><FONT SIZE=2>Version 2.11
</TABLE>
<HR>
<A NAME="conv_time_pict">&nbsp;</A>
<H3><A NAME="TOC58"><TT>conv_time_pict</TT></A></H3>
<PRE>
#include "sflconv.h"
char *
conv_time_pict (
    long time,
    const char *picture)
</PRE>
<H4>Synopsis</H4>
<P>Converts a time to a string using a picture. The picture is
   composed of any combination of these formats: <TABLE BORDER
   NOWRAP> <TR><TD ALIGN="LEFT"><B>h</B>  <TD ALIGN="LEFT">hour,
   0-23 <TR><TD ALIGN="LEFT"><B>hh</B>  <TD ALIGN="LEFT">hour, 00-
   23 <TR><TD ALIGN="LEFT"><B>m</B>  <TD ALIGN="LEFT">minute, 0-59
   <TR><TD ALIGN="LEFT"><B>mm</B>  <TD ALIGN="LEFT">minute, 00-59
   <TR><TD ALIGN="LEFT"><B>s</B>  <TD ALIGN="LEFT">second, 0-59
   <TR><TD ALIGN="LEFT"><B>ss</B>  <TD ALIGN="LEFT">second, 00-59
   <TR><TD ALIGN="LEFT"><B>c</B>  <TD ALIGN="LEFT">centisecond, 0-
   99 <TR><TD ALIGN="LEFT"><B>cc</B>  <TD
   ALIGN="LEFT">centisecond, 00-99 <TR><TD ALIGN="LEFT"><B>a</B>
   <TD ALIGN="LEFT">a/p indicator - use 12-hour clock <TR><TD
   ALIGN="LEFT"><B>aa</B>  <TD ALIGN="LEFT">am/pm indicator - use
   12-hour clock <TR><TD ALIGN="LEFT"><B>A</B>  <TD
   ALIGN="LEFT">A/P indicator - use 12-hour clock <TR><TD
   ALIGN="LEFT"><B>AA</B>  <TD ALIGN="LEFT">AM/PM indicator - use
   12-hour clock <TR><TD ALIGN="LEFT"><B>\x</B>  <TD
   ALIGN="LEFT">literal character x <TR><TD
   ALIGN="LEFT"><B>other</B>  <TD ALIGN="LEFT">literal character
   </TABLE> Returns the formatted result. This is a static string,
   of at most 80 characters, that is overwritten by each call. If
   time is zero, returns an empty string. The 'h', 'm', 's', and
   'c' formats output a leading space when used at the start of
   the picture. This is to improve the alignment of a column of
   times. If the previous character was a digit, these formats
   also output a space in place of the leading zero.
<H4>Source Code - (sflcvtp.c)</H4>
<PRE>
{
    static char
        formatted [FORMAT_MAX + 1];     /*  Formatted return string          */
    int
        hour,                           /*  Hour component of time           */
        minute,                         /*  Minute component of time         */
        second,                         /*  Second component of time         */
        centi,                          /*  1/100 sec component of time      */
        cursize;                        /*  Size of current component        */
    char
       *dest,                           /*  Store formatted data here        */
        ch,                             /*  Next character in picture        */
        lastch = '0';                   /*  Last character we output         */
    Bool
        pm;                             /*  TRUE when hour &gt;= 12             */

    conv_reason = 0;                    /*  No conversion errors so far      */

    /*  Zero time is returned as empty string                                */
    if (time == 0)
      {
        strclr (formatted);
        return (formatted);
      }

    hour    = GET_HOUR   (time);
    minute  = GET_MINUTE (time);
    second  = GET_SECOND (time);
    centi   = GET_CENTI  (time);

    /*  If am/pm component specified, use 12-hour clock                      */
    if (hour &gt;= 12)
      {
        pm = TRUE;
        if (strpbrk (picture, "aA") &amp;&amp; hour &gt; 12)
            hour -= 12;
      }
    else
        pm = FALSE;

    ASSERT (hour   &gt;= 0 &amp;&amp; hour   &lt; 24);
    ASSERT (minute &gt;= 0 &amp;&amp; minute &lt; 60);
    ASSERT (second &gt;= 0 &amp;&amp; second &lt; 60);

    /*  Scan through picture, converting each component                      */
    dest = formatted;
    *dest = 0;                          /*  string is empty                  */
    while (*picture)
      {
        /*  Get character and count number of occurences                     */
        ch = *picture++;
        for (cursize = 1; *picture == ch; cursize++)
            picture++;

        switch (ch)
          {
            /*  h         hour,  0-23                                        */
            /*  hh        hour, 00-23                                        */
            case 'h':
                if (cursize == 1)
                    sprintf (dest, (isdigit (lastch)? "%2d": "%d"), hour);
                else
                if (cursize == 2)
                    sprintf (dest, "%02d", hour);
                break;

            /*  m         minute,  0-59                                      */
            /*  mm        minute, 00-59                                      */
            case 'm':
                if (cursize == 1)
                    sprintf (dest, (isdigit (lastch)? "%2d": "%d"), minute);
                else
                if (cursize == 2)
                    sprintf (dest, "%02d", minute);
                break;

            /*  s         second,  0-59                                      */
            /*  ss        second, 00-59                                      */
            case 's':
                if (cursize == 1)
                    sprintf (dest, (isdigit (lastch)? "%2d": "%d"), second);
                else
                if (cursize == 2)
                    sprintf (dest, "%02d", second);
                break;

            /*  c         centisecond,  0-99                                 */
            /*  cc        centisecond, 00-99                                 */
            case 'c':
                if (cursize == 1)
                    sprintf (dest, (isdigit (lastch)? "%2d": "%d"), centi);
                else
                if (cursize == 2)
                    sprintf (dest, "%02d", centi);
                break;

            /*  a         a/p indicator                                      */
            /*  aa        am/pm indicator                                    */
            case 'a':
                strncat (dest, (pm? "pm": "am"), cursize);
                dest [cursize] = 0;
                break;

            /*  A         A/P indicator                                      */
            /*  AA        AM/PM indicator                                    */
            case 'A':
                strncat (dest, (pm? "PM": "AM"), cursize);
                dest [cursize] = 0;
                break;

            /*  \x        literal character x                                */
            case '\\':
                ch = *picture++;
        }
        if (*dest)                      /*  If something was output,         */
            while (*dest)               /*    skip to end of string          */
                dest++;
        else
            while (cursize--)           /*  Else output ch once or more      */
                *dest++ = ch;           /*    and bump dest pointer          */

        lastch = *(dest - 1);           /*  Get previous character           */
        *dest = 0;                      /*  Terminate the string nicely      */
    }
    return (formatted);
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="sfl44.htm">&lt;</A>
 | <A href="sfl46.htm">&gt;</A> | <A href="sfl502.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-2000 iMatix Corporation</TABLE>
</BODY></HTML>
